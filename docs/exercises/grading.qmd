---
title: Grading Submitted Solutions
format: live-html
---

## Grading R code

Write a function to return the number 2.

```{webr}
#| caption: Sample Exercise 2
#| exercise: example_1
foo <- function () {
  return(4)
}
```

::: { .solution exercise="example_1" }

**Fully worked solution:**

```r
foo <- function () {       #<1>
  return(2)                #<2>
}
```
1. Define the function `foo`, and then,
2. Return the number 2.

:::

```{webr}
#| exercise: example_1
#| check: true
if (!is.function(.result)) {
  list(correct = FALSE, message = "I can't see your function!")
} else if (.result() == 2) {
  list(correct = TRUE, message = "Nice work!")
} else if (.result() == 4) {
  list(correct = FALSE, message = "Have you changed anything?")
} else {
  list(correct = FALSE, message = "Incorrect, sorry!")
}
```

## Find any result in learner output

Write R code that returns 2468 somewhere, even invisibly:

```{webr}
#| caption: Sample Exercise 2
#| exercise: example_2
123
invisible(2468)
456
```

```{webr}
#| exercise: example_2
#| check: true
results <- Filter(\(x) inherits(x, "result"), .evaluate_result)
if(is.null(Find(\(x) x$value == 2468, results))) {
  list(correct = FALSE, message = "Incorrect, sorry.")
} else {
  list(correct = TRUE, message = "Correct!")
}
```

## Feedback for a specific learner error

```{webr}
#| caption: Sample Exercise 3
#| exercise: example_3
123 + "456"
```

```{webr}
#| exercise: example_3
#| check: true
errors <- Filter(\(x) inherits(x, "error"), .evaluate_result)
this_error <- Filter(\(x) x$message == "non-numeric argument to binary operator", errors)
if (length(this_error) > 0) {
  list(
    correct = FALSE,
    type = "info",
    message = "Be careful! In R you cannot add a number and a character string!"
  )
}
```
