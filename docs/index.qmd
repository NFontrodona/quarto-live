---
title: Introduction
format: live-html
engine: knitr
---

{{< include _extensions/r-wasm/live/_knitr.qmd >}}

## Quarto Live

Embed WebAssembly powered code blocks and exercises for both the R and Python languages into [Quarto](https://quarto.org) documents using HTML-based output formats.

The [webR](https://docs.r-wasm.org/webr/latest/) and [Pyodide](https://pyodide.org/en/stable/) WebAssembly engines are used to dynamically execute code in the user's web browser, so only a static web service (such as [GitHub Pages](https://pages.github.com), [Quarto Pub](https://quartopub.com), or [Netlify](https://www.netlify.com)) is required.

This extension provides:

  * Interactive R and Python code blocks.

  * Exercises with optional hints, solutions, and custom grading algorithms.

  * Rich output for showing client-side interactive plots, images, and HTML widgets.

  * A [CodeMirror](https://codemirror.net)-based text editor with automatic theming, syntax highlighting, and auto-complete.

  * Integration with OJS so that interactive code cells update reactively with `ojs` cells.

## Example interactive code block

```{webr}
#| autorun: false
mod <- lm(waiting ~ eruptions, data = faithful)
plot(faithful, main = "Old Faithful Geyser Data")
summary(mod)
```

## Installation

To use this extension, run the following command in a terminal with a Quarto document as the working directory:

```{.bash filename="Terminal"}
quarto add r-wasm/quarto-live
```

Once installed, the extension can be used with Quarto documents within this project. 

## Usage

First set the format for your Quarto document as a `live` variant in the `yaml` header:

````yaml
---
format: live-html
---
````

Note that the default rendering engine used by Quarto is `jupyter`, requiring a Python installation. If you'd prefer to avoid Python you can also explicitly select the `knitr` engine in the document's `yaml` header:

```yaml
---
format: live-html
engine: knitr
---
```

Next, after the `yaml` header but before your content, include setup code for the knitr engine using a relative path:

```yaml
---
format: live-html
engine: knitr
---

{{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}}
```

::: {.callout-note}
Including `_knitr.qmd` is not strictly required if you are using the `jupyter` rendering engine. It is a temporary requirement for the `knitr` engine and will be removed in a future release of `quarto-live`.
:::

Finally, place R code within a `webr` code blocks and python code within `pyodide` code blocks:

::: {.panel-tabset}

## R

````{.markdown filename="example_r.qmd"}
---
title: R Example
engine: knitr
format: live-html
---

{{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}}

```{{webr}}
for (x in 1:5) {
  print(x ** 2)
}
```
````

## Python

````{.markdown filename="example_python.qmd"}
---
title: Python Example
format: live-html
---

```{{pyodide}}
for x in range(5):
  print(x ** 2)
```
````

:::

## Next steps

Work through the [Getting Started](getting_started/editor.qmd) sections to learn more about the configuration options provided for `quarto-live` code blocks.
