viewof _webr_editor_{{block_id}} = {
  const scriptContent = document.querySelector(`script[type=\"webr-{{block_id}}-contents\"]`).textContent;
  const setupElement = document.querySelector(`script[type=\"webr-setup-{{exercise_id}}-contents\"]`);

  const block = JSON.parse(atob(scriptContent));
  const setup = !setupElement ? {} : JSON.parse(atob(setupElement.textContent));

  // Default exercise configuration
  const options = Object.assign(
    {
      envir: block.attr.exercise,
      echo: false,
      error: false,
      startover: true,
      autorun: false,
      runbutton: true,
      completion: true,
      caption: 'Exercise',
      output: true,
      setup: setup.code,
    },
    block.attr
  );

  const editor = new webROjs.ExerciseEditor(webROjs.webRPromise, block.code, options);
  return editor.container;
}
viewof _webr_value_{{block_id}} = webROjs.process(_webr_editor_{{block_id}}, {{block_input}});
_webr_feedback_{{block_id}} = {
  const emptyFeedback = document.createElement('div');
  const checkElement = document.querySelector(`script[type=\"webr-check-{{exercise_id}}-contents\"]`);

  // Return empty block if there's no feedback code
  if (!checkElement) return emptyFeedback;

  // Return empty block if there's no code submitted yet
  const result = await _webr_value_{{block_id}}.result;
  if (!result) return emptyFeedback;

  // Build grading definition
  const check = !checkElement ? {} : JSON.parse(atob(checkElement.textContent));
  const grading = {
    check: check.code,
  };

  const grader = new webROjs.ExerciseGrader(
    _webr_value_{{block_id}}.evaluator,
    grading,
  );
  return await grader.check();
}
