viewof _webr_editor_{{block_id}} = {
  const scriptContent = document.querySelector(`script[type=\"webr-{{block_id}}-contents\"]`).textContent;
  const setupElement = document.querySelector(`script[type=\"webr-setup-{{exercise_id}}-contents\"]`);

  const block = JSON.parse(atob(scriptContent));
  const setup = !setupElement ? {} : JSON.parse(atob(setupElement.textContent));

  // Default exercise configuration
  const options = Object.assign(
    {
      envir: block.attr.exercise,
      echo: false,
      error: false,
      startover: true,
      autorun: false,
      caption: 'Exercise',
      output: true,
      setup: setup.code,
    },
    block.attr
  );

  const editor = new webROjs.ExerciseEditor(block.code, options);
  return editor.container;
}
viewof _webr_value_{{block_id}} = webROjs.process(
  _webr_editor_{{block_id}}.code,
  _webr_editor_{{block_id}}.options,
  {{block_input}}
)
_webr_feedback_{{block_id}} = {
  const emptyFeedback = document.createElement('div');
  const checkElement = document.querySelector(`script[type=\"webr-check-{{exercise_id}}-contents\"]`);

  // Return empty block if there's no feedback code
  if (!checkElement) return emptyFeedback;

  // Return empty block if there's no code submitted yet
  const result = await _webr_value_{{block_id}};
  if (!result) return emptyFeedback;

  // Bind result into grading environment
  const check = JSON.parse(atob(checkElement.textContent));
  const envir = await webROjs.getExerciseEnv(check.attr.exercise);
  console.log(result);
  envir.bind('.result', result);

  // Evaluate supplied grading function in the grader environment
  const options = {
    envir: check.attr.exercise,
    echo: false,
  };

  return await webROjs.process(
    `
      grade <- function() {
        grader <- (${check.code})
        grader(.result)
      }
      tryCatch({
        grade()
      }, error = function(e){
        invisible(NULL)
      })
    `,
    options,
    {{block_input}}
  );
}
